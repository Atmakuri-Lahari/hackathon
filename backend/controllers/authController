const User = require('../models/User');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');

const eventSpaceOwners = [
    "owner1@example.com", "owner2@example.com", "owner3@example.com",
    "owner4@example.com", "owner5@example.com", "owner6@example.com",
    "owner7@example.com", "owner8@example.com", "owner9@example.com",
    "owner10@example.com"
];

// Register User
exports.registerUser = async (req, res) => {
    const { name, email, password, role } = req.body;

    try {
        let user = await User.findOne({ email });
        if (user) return res.status(400).json({ message: 'User already exists' });

        // Validate Event Space Owner Email
        if (role === "owner" && !eventSpaceOwners.includes(email)) {
            return res.status(400).json({ message: "Invalid registration: Only predefined event space owners are allowed." });
        }

        const salt = await bcrypt.genSalt(10);
        const hashedPassword = await bcrypt.hash(password, salt);

        user = new User({ name, email, password: hashedPassword, role });
        await user.save();

        const token = jwt.sign({ id: user._id, role: user.role }, process.env.JWT_SECRET, { expiresIn: '1d' });

        res.json({ token, user: { id: user._id, name, email, role } });
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
};

// Login User (With Correct JWT Token)
const ADMIN_EMAIL = "admin@example.com";
const ADMIN_PASSWORD = "admin123";

// ✅ Admin & User Login
exports.loginUser = async (req, res) => {
    const { email, password } = req.body;

    try {
        // ✅ If Admin Logs In
        if (email === ADMIN_EMAIL) {
            if (password !== ADMIN_PASSWORD) {
                return res.status(400).json({ message: "Invalid admin credentials" });
            }

            // ✅ Find or Create Admin User in DB
            let admin = await User.findOne({ email: ADMIN_EMAIL });
            if (!admin) {
                const hashedPassword = await bcrypt.hash(ADMIN_PASSWORD, 10);
                admin = new User({ name: "Admin", email: ADMIN_EMAIL, password: hashedPassword, role: "admin" });
                await admin.save();
            }

            // ✅ Ensure the admin has a valid ObjectId
            const token = jwt.sign({ id: admin._id.toString(), role: admin.role }, process.env.JWT_SECRET, { expiresIn: "1d" });

            return res.json({ token, user: { id: admin._id, name: admin.name, email: admin.email, role: admin.role } });
        }

        // ✅ Normal User Login
        const user = await User.findOne({ email });
        if (!user) return res.status(400).json({ message: "Invalid credentials" });

        const isMatch = await bcrypt.compare(password, user.password);
        if (!isMatch) return res.status(400).json({ message: "Invalid credentials" });

        const token = jwt.sign({ id: user._id.toString(), role: user.role }, process.env.JWT_SECRET, { expiresIn: "1d" });

        res.json({ token, user: { id: user._id, name: user.name, email: user.email, role: user.role } });
    } catch (err) {
        console.error("Login Error:", err);
        res.status(500).json({ message: "Server error" });
    }
};
//t User Profile
exports.getUserProfile = async (req, res) => {
    try {
        const user = await User.findById(req.user.id).select('-password');
        res.json(user);
    } catch (err) {
        res.status(500).json({ message: 'Server error' });
    }
};
